/**
 * @file Merge.gs
 * @description Contains the logic for the Merge Sync feature, which reconciles manual
 * permission changes with the control sheet.
 */

/**
 * Performs a reconciliation sync by discovering all manually added members and adding them
 * to the appropriate sheets after user confirmation.
 */
function mergeSync() {
  const ui = SpreadsheetApp.getUi();
  const lock = LockService.getScriptLock();
  if (!lock.tryLock(15000)) {
    ui.alert('Sync is already in progress. Please wait a few minutes and try again.');
    return;
  }

  try {
    log_('*** Starting Merge & Reconcile...');
    showToast_('Discovering manually added members...', 'Merge & Reconcile', 10);

    // 1. Discover manual additions using the centralized discovery function
    const reconciliationPlan = discoverManualAdditions_();

    if (reconciliationPlan.length === 0) {
      log_('No manually added members found. Sheets are already in sync with group memberships and folder permissions.');
      ui.alert('No manually added members found. Sheets are already in sync with group memberships and folder permissions.');
      return;
    }

    // 2. Get user confirmation
    let confirmationMessage = 'The following manually added members will be added to the user sheets:\n';
    reconciliationPlan.forEach(plan => {
      confirmationMessage += `\nSheet '${plan.sheetName}':\n`;
      plan.membersToAdd.forEach(member => {
        confirmationMessage += `  - ${member.email} (found via ${member.source})\n`;
      });
    });
    confirmationMessage += '\nAre you sure you want to proceed?';

    const response = ui.alert('Confirm Reconciliation', confirmationMessage, ui.ButtonSet.YES_NO);

    if (response !== ui.Button.YES) {
      ui.alert('Reconciliation cancelled.');
      log_('User cancelled reconciliation.');
      return;
    }

    // 3. Execute the reconciliation
    log_('*** Executing reconciliation...');
    showToast_('Adding members to sheets...', 'Merge & Reconcile', -1);
    executeReconciliation_(reconciliationPlan);

    log_('*** Merge & Reconcile Complete.');
    showToast_('Merge & Reconcile Complete.', 'Merge & Reconcile', 5);
    ui.alert('Merge & Reconcile sync is complete. Manually added members have been added to the sheets.');

  } catch (e) {
    const errorMessage = 'FATAL ERROR in mergeSync: ' + e.toString() + '\n' + e.stack;
    log_(errorMessage, 'ERROR');
    showToast_('Merge sync failed with a fatal error.', 'Merge & Reconcile', 5);
    ui.alert('A fatal error occurred during the merge sync: ' + e.message);
    sendErrorNotification_(errorMessage);
  } finally {
    lock.releaseLock();
  }
}

/**
 * Executes the reconciliation plan by adding the specified members to the sheets.
 * @param {Array<Object>} reconciliationPlan - The plan generated by discoverManualAdditions_.
 */
function executeReconciliation_(reconciliationPlan) {
  reconciliationPlan.forEach(plan => {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(plan.sheetName);
    if (sheet) {
      log_(`Adding ${plan.membersToAdd.length} members to sheet '${plan.sheetName}'.`);
      const newValues = plan.membersToAdd.map(member => [member.email]);
      sheet.getRange(sheet.getLastRow() + 1, 1, newValues.length, 1).setValues(newValues);
    } else {
      log_(`Sheet '${plan.sheetName}' not found during execution. Skipping.`, 'WARN');
    }
  });
}