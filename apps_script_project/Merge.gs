/**
 * @file Merge.gs
 * @description Contains the logic for the Merge Sync feature, which reconciles manual
 * permission changes with the control sheet.
 */

/**
 * Performs a reconciliation sync by discovering all manually added members and adding them
 * to the appropriate sheets after user confirmation.
 */
function mergeSync() {
  const ui = SpreadsheetApp.getUi();
  const lock = LockService.getScriptLock();
  if (!lock.tryLock(15000)) {
    ui.alert('Sync is already in progress. Please wait a few minutes and try again.');
    return;
  }

  try {
    log_('*** Starting Merge & Reconcile...');
    showToast_('Discovering issues...', 'Merge & Reconcile', 10);

    const reconciliationPlan = discoverManualAdditions_();
    const roleMismatches = getRoleMismatches_();

    if (reconciliationPlan.length === 0 && roleMismatches.length === 0) {
      log_('No manually added members or role mismatches found. Sheets are already in sync.');
      ui.alert('No manually added members or role mismatches found. Sheets are already in sync.');
      return;
    }

    let message = '';
    const hasActionableItems = reconciliationPlan.length > 0;

    if (roleMismatches.length > 0) {
      message += 'The following role mismatches were found and require manual correction in Google Drive:\n';
      roleMismatches.forEach(mismatch => {
        message += `\nFolder '${mismatch.folderName}':\n`;
        message += `  - ${mismatch.email}: Expected ${mismatch.expected}, but has ${mismatch.actual}\n`;
      });
    }

    if (reconciliationPlan.length > 0) {
      if (message !== '') {
        message += '\n---\n';
      }
      message += 'The following manually added members can be automatically added to the user sheets:\n';
      reconciliationPlan.forEach(plan => {
        message += `\nSheet '${plan.sheetName}':\n`;
        plan.membersToAdd.forEach(member => {
          message += `  - ${member.email} (found via ${member.source})\n`;
        });
      });
    }

    if (hasActionableItems) {
      message += '\nDo you want to proceed with adding the manually added members?';
      const response = ui.alert('Confirm Reconciliation', message, ui.ButtonSet.YES_NO);

      if (response === ui.Button.YES) {
        log_('*** Executing reconciliation...');
        showToast_('Adding members to sheets...', 'Merge & Reconcile', -1);
        executeReconciliation_(reconciliationPlan);
        log_('*** Merge & Reconcile Complete.');
        showToast_('Merge & Reconcile Complete.', 'Merge & Reconcile', 5);
        ui.alert('Merge & Reconcile sync is complete. Manually added members have been added to the sheets.');
      } else {
        ui.alert('Reconciliation cancelled.');
        log_('User cancelled reconciliation.');
      }
    } else {
      // Only role mismatches were found
      ui.alert('Reconciliation Not Needed', message, ui.ButtonSet.OK);
    }

  } catch (e) {
    const errorMessage = 'FATAL ERROR in mergeSync: ' + e.toString() + '\n' + e.stack;
    log_(errorMessage, 'ERROR');
    showToast_('Merge sync failed with a fatal error.', 'Merge & Reconcile', 5);
    ui.alert('A fatal error occurred during the merge sync: ' + e.message);
    sendErrorNotification_(errorMessage);
  } finally {
    lock.releaseLock();
  }
}

/**
 * Executes the reconciliation plan by adding the specified members to the sheets.
 * @param {Array<Object>} reconciliationPlan - The plan generated by discoverManualAdditions_.
 */
function executeReconciliation_(reconciliationPlan) {
  reconciliationPlan.forEach(plan => {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(plan.sheetName);
    if (sheet) {
      log_(`Adding ${plan.membersToAdd.length} members to sheet '${plan.sheetName}'.`);
      const newValues = plan.membersToAdd.map(member => [member.email]);
      sheet.getRange(sheet.getLastRow() + 1, 1, newValues.length, 1).setValues(newValues);
    } else {
      log_(`Sheet '${plan.sheetName}' not found during execution. Skipping.`, 'WARN');
    }
  });
}

function getRoleMismatches_() {
  const mismatches = [];
  const managedFoldersSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(MANAGED_FOLDERS_SHEET_NAME);
  if (!managedFoldersSheet || managedFoldersSheet.getLastRow() < 2) {
    return mismatches;
  }

  const managedFoldersData = managedFoldersSheet.getRange(2, 1, managedFoldersSheet.getLastRow() - 1, GROUP_EMAIL_COL).getValues();
  managedFoldersData.forEach(row => {
    const folderName = row[FOLDER_NAME_COL - 1];
    const folderId = row[FOLDER_ID_COL - 1];
    const expectedRole = row[ROLE_COL - 1];
    const groupEmail = row[GROUP_EMAIL_COL - 1].toLowerCase();

    if (!folderId || !groupEmail || !expectedRole) return;

    try {
      const folder = DriveApp.getFolderById(folderId);
      const groupMembers = getActualMembers_(groupEmail);
      const viewers = folder.getViewers().map(u => u.getEmail().toLowerCase());
      const editors = folder.getEditors().map(u => u.getEmail().toLowerCase());

      groupMembers.forEach(memberEmail => {
        const member = memberEmail.toLowerCase();
        let actualRole = 'NONE';
        if (editors.includes(member)) {
          actualRole = 'EDITOR';
        } else if (viewers.includes(member)) {
          actualRole = 'VIEWER';
        }

        if (actualRole.toUpperCase() !== expectedRole.toUpperCase()) {
          mismatches.push({
            folderName: folderName,
            email: member,
            expected: expectedRole,
            actual: actualRole
          });
        }
      });
    } catch (e) {
      // Ignore errors here, they will be caught by the dry run audit
    }
  });
  return mismatches;
}